buildscript {
    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
        maven {
            name = "MinecraftForge"
            url = "https://maven.daporkchop.net/"
        }
        maven {
            name = "SpongePowered"
            url = "https://repo.spongepowered.org/maven/"
        }
        maven {
            url = "https://jitpack.io"
        }
    }
    dependencies {
        classpath ("com.anatawa12.forge:ForgeGradle:2.3-1.0.+"){
            changing = true
        }
        classpath "org.spongepowered:mixingradle:0.6-SNAPSHOT"
    }
}

plugins {
    id "com.github.johnrengelman.shadow" version "4.0.4"
    id "maven-publish"
}

apply plugin: "net.minecraftforge.gradle.forge"
apply plugin: "org.spongepowered.mixin"
apply plugin: "java"

ext {
    //general things
    javaVersion = "1.8"

    //determine the version
    if (project.hasProperty('CustomReleaseVersion')) {
        vsVersion = project.property('CustomReleaseVersion')
    } else {
        // Get the revision. Use `.execute([], file("."))`
        // to always execute in the directory of build.gradle
        def revision = "git rev-parse HEAD".execute([], file(".")).text
        vsVersion = "1.0.0+" + revision.substring(0, 10)
    }

    //minecraft things
    mcpmappingsVersion = "stable_39"
    minecraftforgeVersion = "14.23.5.2838"
    minecraftVersion = "1.12.2"

    //dependency things
    cqengineVersion = "3.4.0"
    jacksonVersion = "2.10.0"
    javaxInjectVersion = "1"
    lombokVersion = "1.18.10"
    mixinVersion = "0.8.2"
    spongeVersion = "1.12.2-2838-7.3.0"
    vsApiVersion = "1.0.0.9"
}

version = "$vsVersion"
group = "org.valkyrienskies"
archivesBaseName = "valkyrien-skies"

compileJava {
    sourceCompatibility = targetCompatibility = "$javaVersion"
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

minecraft {
    version = "$minecraftVersion-$minecraftforgeVersion"
    runDir = "run"
    mappings = "$mcpmappingsVersion"
    makeObfSourceJar = false

    coreMod = "org.valkyrienskies.mixin.MixinLoaderForge"

    def args = [
            "-Dmixin.checks.interfaces=true",
            "-Dmixin.debug.export=true",
            "-Dmixin.debug.verbose=true",
            "-Dmixin.hotSwap=true",
            "-Xmx2G",
            "-XX:+UseG1GC",
            "-ea",
            "-da:io.netty..."
    ]
    clientJvmArgs += args
    serverJvmArgs += args
}

configurations {
    shade
    compile.extendsFrom shade

    all { //hacky workaround
        resolutionStrategy {
            force("com.google.guava:guava:21.0")
        }
    }
}

repositories {
    mavenCentral()
    maven {
        name = "SpongePowered"
        url = "https://repo.spongepowered.org/maven/"
    }
    maven {
        name = "DaPorkchop_"
        url = "https://maven.daporkchop.net/"
    }
    maven { url 'https://jitpack.io' }
    jcenter()
}

// This is included here because of this garbage https://github.com/SpongePowered/SpongeForge/blob/stable-7/build.gradle#L40-L52
// Basically I can't add compatibility for the newest SpongeForge without this
// Thanks Sponge team!!! >:(
configurations.all {
    resolutionStrategy {
        force 'com.typesafe:config:1.3.1'
    }
}

dependencies {
    // mixin needs to be distributed with the mod, very important
    shade("org.spongepowered:mixin:$mixinVersion") {
        exclude module: "commons-io"
        exclude module: "guava"
        exclude module: "gson"
        exclude module: "launchwrapper"
    }
    // Mixin annotation processor creates the mixin obfuscation refmap
    annotationProcessor("org.spongepowered:mixin:$mixinVersion:processor")
    annotationProcessor("org.apache.logging.log4j:log4j-core:2.11.2")
    
    // Needs to be present at compile-time because we mix in to spongeforge, however marking it as
    // compile makes forge load it as a mod in a dev environment, which is very annoying
    compileOnly("org.spongepowered:spongeforge:$spongeVersion:dev") {
        transitive = true
    }

    // The VS API, just shade it into core no need to make it a standalone mod
    shade "org.valkyrienskies:api:$vsApiVersion"

    // VS World and Control, for local testing only, not shaded in
    compile("org.valkyrienskies:Valkyrien-Skies-World:1d9df462f15c9125255ea086d7aeb75fe12e5877:all") {
        transitive = false
    }
    compile("org.valkyrienskies:Valkyrien-Skies-Control:bc55aa179d643fd30d4c49a48a2491633033c5f3:all") {
        transitive = false
    }

    // ODE4j physics engine (https://mvnrepository.com/artifact/org.ode4j/core)
    // shade group: 'org.ode4j', name: 'core', version: '0.4.0' // 800KB
    // shade group: 'org.ode4j', name: 'demo', version: '0.4.0'

    // javax inject annotation
    shade "javax.inject:javax.inject:$javaxInjectVersion" // 2KB

    // CQEngine for in-memory nonpersistent database
    // Provides Kryo
    shade("com.googlecode.cqengine:cqengine:$cqengineVersion") {
        exclude module: "sqlite-jdbc" //11.1 MB
        exclude module: "antlr4-runtime" //648.0 KB
        exclude module: "javassist" //1.5 MB
        //exclude module: "typetools" //23.5 KB
    }

    // JOML
    shade 'org.joml:joml:1.9.25' // 663 KB

    // Jackson
    shade "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
    shade "com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:$jacksonVersion"
    shade "com.fasterxml.jackson.module:jackson-module-parameter-names:$jacksonVersion"
    shade "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:$jacksonVersion"

    // Include all dependencies in the /dependencies folder
    shade fileTree(include: ["*.jar"], dir: "dependencies")

    // lombok
    compileOnly "org.projectlombok:lombok:$lombokVersion"
    annotationProcessor "org.projectlombok:lombok:$lombokVersion"

    // junit tests
    testImplementation 'org.junit.jupiter:junit-jupiter:5.6.2'
    testImplementation 'org.hamcrest:hamcrest:2.2'
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include "mcmod.info"

        // replace version and mcversion
        expand "version": project.version, "mcversion": project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude "mcmod.info"
    }

    // move _at.cfg into META-INF
    rename '(.+_at.cfg)', 'META-INF/$1'
}

mixin {
    defaultObfuscationEnv searge
    add sourceSets.main, "mixins.valkyrienskies.refmap.json"
}

jar {
    classifier = 'unshaded' // this is probably not the one you want
    manifest.attributes(
            "MixinConfigs": "mixins.valkyrienskies.json,mixins.valkyrienskies-sponge-compat.json",
            "tweakClass": "org.spongepowered.asm.launch.MixinTweaker",
            "FMLCorePluginContainsFMLMod": "true",
            "FMLCorePlugin": "org.valkyrienskies.mixin.MixinLoaderForge",
            "ForceLoadAsMod": "true",
            "FMLAT": "valkyrienskies_at.cfg"
    )
}

shadowJar {
    classifier = null // No -all classifier
    configurations = [project.configurations.shade]
    relocate 'com.fasterxml', 'org.valkyrienskies.deps.com.fasterxml'
    mergeServiceFiles() // https://github.com/johnrengelman/shadow/issues/304
}

reobf {
    jar {
        mappingType = "SEARGE"
        classpath = sourceSets.main.compileClasspath
    }
    shadowJar{
        mappingType = "SEARGE"
        classpath = sourceSets.main.compileClasspath
    }
}

build.dependsOn(reobfJar)
build.dependsOn(reobfShadowJar)

publishing {
    /*repositories {
        def ghpUser = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
        def ghpPassword = project.findProperty("gpr.key") ?: System.getenv("TOKEN")
        if (ghpUser != null && ghpPassword != null) {
            maven {
                name = "GitHubPackages"
                url = uri("https://maven.pkg.github.com/ValkyrienSkies/Valkyrien-Skies")
                credentials {
                    username = ghpUser
                    password = ghpPassword
                }
            }
        }
        if (project.hasProperty("daporkchopMavenUsername") && project.hasProperty("daporkchopMavenPassword")) {
            maven {
                credentials {
                    username = "$daporkchopMavenUsername"
                    password = "$daporkchopMavenPassword"
                }

                name = "DaPorkchop_"
                url = "https://maven.daporkchop.net/release/"
            }
        }
    }*/
    publications {
        maven(MavenPublication) {
            groupId = "org.valkyrienskies"
            artifactId = "valkyrien-skies"
            version = project.version

            artifact jar {
                classifier null
            }
            
            artifact shadowJar {
                classifier "all"
            }
            
            artifact sourceJar {
                classifier "sources"
            }
        }
    }
}

//sets additional JVM args for genIntellijRuns
task preIntellijRuns {
    doFirst {
        StreamSupport.stream(configurations.compile.spliterator(), false).filter({
            it.name.contains("mixin")
        }).findAny().ifPresent({
            minecraft.clientJvmArgs += "-javaagent:" + it.absolutePath
            minecraft.serverJvmArgs += "-javaagent:" + it.absolutePath
        })
    }
}
genIntellijRuns.dependsOn(preIntellijRuns)

// Junit testing
test {
    useJUnitPlatform()
}

/*
// Based on this tutorial https://darkhax.net/2017/10/jar-signing
task signJar(type: SignJar, dependsOn: reobfShadowJar) {
    onlyIf {
        project.hasProperty('keyStore')
    }

    keyStore = project.findProperty('keyStore')
    alias = project.findProperty('keyStoreAlias')
    storePass = project.findProperty('keyStorePass')
    keyPass = project.findProperty('keyStoreKeyPass')

    inputFile = new File(shadowJar.getDestinationDir(), shadowJar.getArchiveName().replaceAll(".jar", "-all.jar"));
    outputFile = inputFile
}

build.dependsOn signJar
 */
